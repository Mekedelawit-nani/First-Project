#include <iostream>
#include <string>
#define TAXRATE 9.9 //define a constant Tax rate
int main() {
    //This program is used to analyse the store's sales and inventory
    //c++ is a compiled language
    
    //Declaring variables for a product details
    std::string product_name;
    int product_catagory;
    int initial_inventory_quantity;
    float product_price_per_unit;
    int number_of_items_sold;

    //Declaring variables for computed values
    int new_inventory;
    float total_sales;
   
    //Let us demonstrate different initalization methods:
    //direct initialization
    int cactus = 5;
    //assignment after declaration
    float cactus_size;
    cactus_size = 5.5;
    //list initialization
    int cactus_catagory{5};
   
    //Defining a constant
    const double Tax_rate = 9.9;
    
    //The printed out prompts for the user
    std::cout<<"What is the product name(give a single word)?  ";
    std::cin>>product_name;
    std::cout<<"What is the product catagory(an intiger from 1 to 5)?  ";
    std::cin>>product_catagory;
    std::cout<<"What is the initial inventory quantity? ";
    std::cin>>initial_inventory_quantity;
    std::cout<<"What is the product_price_per_unit?  ";
    std::cin>>product_price_per_unit;
    std::cout<<"What is the number of items sold?  ";
    std::cin>>number_of_items_sold;

    //calculations
    new_inventory = initial_inventory_quantity;
    new_inventory -= number_of_items_sold;
    total_sales = number_of_items_sold * product_price_per_unit;
    std::string inventory_status;
    if (new_inventory < 10){
        inventory_status = "Low Inventory";
    }
    else{
        inventory_status = "Sufficient Inventory";
    }

    //Extra helper variables using type deduction
    auto total_sales_amount = total_sales;
    decltype(initial_inventory_quantity)initial_inventory = 100;

    //flow control
    if (0< product_catagory < 6)
        std::cout<<"valid"<<std::endl;
    else
        std::cout<<"invalid"<<std::endl;
    switch(product_catagory){
    case 1:
        std::cout<<"Category 1: Electronics"<<std::endl;
        break;
    case 2:
        std::cout<<"Category 2: Groceries"<<std::endl;
        break;
    case 3:
        std::cout<<"Category 3: Clothing"<<std::endl;
        break;
    case 4:
        std::cout<<"Category 4: Stationary"<<std::endl;
        break;
    case 5:
        std::cout<<"Category 5: Miscellaneous"<<std::endl;
        break;
    default: 
        std::cout<<"It is not Within 1-5!"<<std::endl;
    }
   
    //forloop for the receipt
    std::cout<<"Price: "<<"\n";
    for(int i = 1; i <= number_of_items_sold; ++i) 
    {
        std::cout<<"Item "<<i<<": $"<<product_price_per_unit<<std::endl;
    }
    
    //output all information
        std::cout<<"Tax Rate using const: "<<Tax_rate<<std::endl;
        std::cout<<"Tax Rate using #define: "<<TAXRATE<<std::endl;
        std::cout<<"The Product name: "<<product_name<<" ,the Product catagory: "<<product_catagory<<" ,the Initial inventory quantity: "<<initial_inventory_quantity<<" ,the Number of items sold: "<<number_of_items_sold<<std::endl;
        std::cout<<"New Inventory: "<<new_inventory<<"\nTotal Sales: $"<<total_sales<<std::endl;
        std::cout<<"Inventory status: "<<inventory_status<<std::endl;
        std::cout<<"Helper variable Values:"<<std::endl;
        std::cout<<"Total sales amount: "<<total_sales_amount<<" and Initial inventory: "<<initial_inventory<<std::endl;
        
    return 0;
}
